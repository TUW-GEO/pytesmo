build: false

environment:
  matrix:
    - PYTHON_ARCH: 64
      PYTHON_VERSION: "2.7"
      PYTHON: "C:\\Python27-x64"
      MINICONDA: "C:\\Miniconda-x64" # use preinstalled conda
    - PYTHON_ARCH: 32
      PYTHON_VERSION: "2.7"
      PYTHON: "C:\\Python27"
      MINICONDA: "C:\\Miniconda"
    - PYTHON_ARCH: 64
      PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6"
      MINICONDA: "C:\\Miniconda36-x64"
    - PYTHON_ARCH: 64
      PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7"
      MINICONDA: "C:\\Miniconda37-x64"


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - cmd: python -m pip install --upgrade pip

  # Append conda to path
  - set "PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%;"
  # Get test data
  - git submodule update --init --recursive
  # Config conda
  - conda info --all
  - conda config --set always_yes yes --set changeps1 no
  - conda update --quiet conda
  - cmd: activate # important: activate the base once!
  - cmd: conda init cmd.exe
  
    # Create and activate environment
  - conda config --add channels https://conda.anaconda.org/ioos
  - conda create -n pytesmo python=%PYTHON_VERSION%
  - cmd: activate pytesmo
  # Install dependencies
  - conda install -c conda-forge numpy scipy pandas netCDF4 cython pip matplotlib pykdtree pyresample cartopy xarray
  - pip install pygeogrids
  - pip install pygeobase
  - pip install ascat
  - pip install ismn
  - pip install pytest==3.8.2 # While supporting python2 x86
  
  # Print debug infos
  - git status
  - conda info -a
  - python --version
  - where python
  - conda list
  - pip list
  
test_script:
  # Build the compiled extension and run the project tests
  - cmd: python setup.py test

after_test:
  # If tests are successful, create a whl package for the project.
  - cmd: python setup.py bdist_wheel bdist_wininst
  - ps: "ls dist"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
